#!/bin/bash
#
# Copyright (c) 2017, Cisco Systems
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice, this
#   list of conditions and the following disclaimer in the documentation and/or
#   other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

set -e
declare -r esc=$'\033'
declare -r title="${esc}[1;33m"
declare -r time="${esc}[1;34m"
declare -r clear="${esc}[0;39m"

declare -r cmds="arc amp audit spark"

function setup_version() {
  if [[ ! -f ./version ]]; then
    echo ${BUILD_NUMBER:-$USER} > ./version
  fi
}

function check_spelling() {
  printf "\n\n${title}Checking spelling for $1...${clear}\n"
  misspell $1
}

function check_format() {
  printf "\n\n${title}Checking formatting for $1...${clear}\n"
  if [ $(gofmt -l -s $1 | wc -l) -gt 0 ]; then
    gofmt -l -s ./pkg
    echo "Formatting errors. Exiting"
    exit 1
  fi
}

function vet() {
  printf "\n\n${title}Vetting...${clear}\n"
  go vet ./...
}

function build() {
  printf "\n\n${title}Building...${clear}\n\n"
  set -x
  export BUILD_NUMBER=$(cat ./version)
  ./install_deps
  local cmd
  for cmd in ${cmds}; do
    go generate -v ./cmd/${cmd}
    go install -v ./cmd/${cmd}
  done
  set +x
  printf "${time}"
}

function report_versions() {
  printf "\n\n${title}Versions...${clear}\n\n"
  local cmd
  for cmd in ${cmds}; do
    ${cmd} version
  done
}

function run_unit_tests() {
  printf "\n\n${title}Running unit tests...${clear}\n\n"
  local pkg_with_tests="route ssh"
  local pkg
  for pkg in ${pkg_with_tests}; do
    if [[ -d ./pkg/${pkg} ]]; then
      go test -v ./pkg/${pkg}
    fi
  done
  printf "${time}"
}

function run_integ_tests() {
  printf "\n\n${title}Running integrated tests...${clear}\n\n"
  cd test
  ./test_all
  cd - >/dev/null 2>&1
  printf "${time}"
}

function clean() {
  printf "\n\n${title}Cleaning...${clear}\n\n"
  go clean -i -x ./pkg/...
  go clean -i -x ./vendor/...
  go clean -i -x ./cmd/...
  find test -name "*.out.txt" -print -exec rm {} \;
  printf "${time}"
}

function main() {
  if [[ "$1" == "clean" ]]; then
    time clean; printf "${clear}"
    return
  fi
  setup_version
  check_spelling ./pkg
  check_spelling ./cmd
  check_format ./pkg
  check_format ./cmd
  vet
  time build; printf "${clear}"
  report_versions
  time run_unit_tests; printf "${clear}"
  time run_integ_tests; printf "${clear}"
}

main "$@"
